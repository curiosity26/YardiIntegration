<?php
/**
* @file
* Connects Drupal and Webform submissions to the Yardi Senior Living CMS.
*/

function YardiIntegration_menu() {
  return array(
    'admin/config/services/yardi' => array(
      'title' => 'Yardi',
      'page callback' => 'YardiIntegration_admin_settings_list',
      'access arguments' => array('administer yardi settings'),
      'type' => MENU_NORMAL_ITEM,
      'menu name' => 'management'
    ),
    'admin/config/services/yardi/add' => array(
      'title' => 'Add Yardi Configuration',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('yardi_settings_form'),
      'access arguments' => array('administer yardi settings'),
      'type' => MENU_LOCAL_ACTION,
      'menu name' => 'management',
      'weight' => -10
    ),
    'admin/config/services/yardi/%yardi/edit' => array(
      'title' => 'Edit Yardi Configuration',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('yardi_settings_form', 4),
      'access arguments' => array('administer yardi settings'),
      'type' => MENU_CALLBACK
    ),
    'admin/config/services/yardi/%yardi/delete' => array(
      'title' => 'Delete Yardi Configuration',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('yardi_settings_delete_form', 4),
      'access arguments' => array('administer yardi settings'),
      'type' => MENU_CALLBACK
    )
  );
}

/**
 *  Implements hook_permission().
 */
function YardiIntegration_permission() {
  return array(
    'administer yardi settings' => array(
      'title' => t('Administer Yardi Settings'),
      'description' => t('Allow users with this permission to change or add settings to integrate with Yardi.'),
      'restrict access' => TRUE
    ),
    'configure yardi webform' => array(
      'title' => t('Configure Yardi with Webforms'),
      'description' => t('Allow users with this permission to enable and configure Yardi configurations on Webforms. '.
        'The user must first have access rights to the Webform node before being able to apply Yardi configurations.'),
      'restrict access' => TRUE
    )
  );
}

/* Yardi Settings Admin */

function YardiIntegration_admin_settings_list() {
  $settings = yardi_get_settings();

  $header = array(t('Id'), t('Label'), t('Operations'));
  $rows = array();
  foreach ($settings as $ysid => $setting) {
    $rows[] = array(
      $setting['ysid'],
      t('<strong>!label</strong> <small>(!machine_name)</small>',
        array('!label' => $setting['label'], '!machine_name' => $setting['machine_name'])),
      l('Edit', 'admin/config/services/yardi/'.$setting['ysid'].'/edit',
        array('query' => array('destination' => 'admin/config/services/yardi/list'))).' | '.
      l('Delete', 'admin/config/services/yardi/'.$setting['ysid'].'/delete',
        array('query' => array('destination' => 'admin/config/services/yardi/list')))
    );
  }

  return array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#empty' => t('No settings have been created. !link.',
      array('!link' => l('Add settings', 'admin/config/services/yardi/add',
        array('query' => array('destination' => 'admin/config/services/yardi/list')))))
  );
}

function yardi_settings_exist($value) {
  $exists = db_query_range("SELECT 1 FROM {yardi_settings} WHERE machine_name = :name", 0, 1,
    array(':name' => $value))->fetchField();
  return $exists;
}

function yardi_settings_form($form, &$form_state, $yardi = array()) {
  // Load Yardi
  module_load_include('php', 'YardiIntegration', 'api/YardiClient/YardiRequest');
  $form_state['storage']['yardi'] = $yardi;

  // Determine defaults
  $defaults = array();
  if (!empty($form_state['values'])) {
    $defaults = $form_state['values'];
  }
  elseif (!empty($yardi)) {
    $defaults = $yardi;
    $form['ysid'] = array(
      '#type' => 'token',
      '#value' => $yardi['ysid']
    );
  }

  $form['label'] = array(
    '#type' => 'textfield',
    '#title' => t('Label'),
    '#required' => TRUE,
    '#maxlength' => 50,
    '#default_value' => isset($defaults['label']) ? $defaults['label'] : NULL
  );

  $form['machine_name'] = array(
    '#type' => 'machine_name',
    '#title' => t('Machine Name'),
    '#maxlength' => 50,
    '#machine_name' => array(
      'source' => array('label'),
      'exists' => 'yardi_settings_exist'
    ),
    '#default_value' => isset($defaults['machine_name']) ? $defaults['machine_name'] : NULL
  );

  $form['SourceName'] = array(
    '#type' => 'textfield',
    '#title' => t('Source Name'),
    '#description' => t('Name of your company. Will be added as a source in the prospect guest card'),
    '#required' => TRUE,
    '#maxlength' => 50,
    '#default_value' => isset($defaults['SourceName']) ? $defaults['SourceName'] : NULL
  );

  $form['dbusername'] = array(
    '#type' => 'textfield',
    '#title' => t('DbUserName'),
    '#required' => TRUE,
    '#maxlength' => 50,
    '#default_value' => isset($defaults['dbusername']) ? $defaults['dbusername'] : NULL
  );

  $form['dbpassword'] = array(
    '#type' => 'textfield',
    '#title' => t('DbPassword'),
    '#required' => TRUE,
    '#maxlength' => 25,
    '#default_value' => isset($defaults['dbpassword']) ? $defaults['dbpassword'] : NULL
  );

  $form['dbname'] = array(
    '#type' => 'textfield',
    '#title' => t('DbName'),
    '#required' => TRUE,
    '#maxlength' => 25,
    '#default_value' => isset($defaults['dbname']) ? $defaults['dbname'] : NULL
  );

  $form['server'] = array(
    '#type' => 'textfield',
    '#title' => t('Server'),
    '#required' => TRUE,
    '#maxlength' => 25,
    '#default_value' => isset($defaults['server']) ? $defaults['server'] : NULL
  );

  $form['propertycode'] = array(
    '#type' => 'textfield',
    '#title' => t('Property Code'),
    '#required' => TRUE,
    '#maxlength' => 8,
    '#default_value' => isset($defaults['propertycode']) ? $defaults['propertycode'] : NULL
  );

  $form['platform'] = array(
    '#type' => 'select',
    '#title' => t('Platform'),
    '#required' => TRUE,
    '#default_value' => isset($defaults['platform']) ? $defaults['platform'] : \Yardi\YardiPlatform::SQL_SERVER,
    '#options' => array(
      \Yardi\YardiPlatform::SQL_SERVER => \Yardi\YardiPlatform::SQL_SERVER,
      \Yardi\YardiPlatform::ORACLE => \Yardi\YardiPlatform::ORACLE
    )
  );

  $form['url'] = array(
    '#type' => 'textfield',
    '#title' => t('URL'),
    '#required' => TRUE,
    '#maxlength' => 255,
    '#default_value' => isset($defaults['url']) ? $defaults['url'] : NULL
  );

  $form['debug'] = array(
    '#type' => 'checkbox',
    '#title' => t('Debug'),
    '#default_value' => isset($defaults['debug']) ? $defaults['debug'] : variable_get('yardi_debug', FALSE),
    '#description' => t('Log the SOAP requests to and from Yardi')
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#suffix' => ' '.l('Cancel', 'admin/config/services/yardi/list')
  );

  return $form;
}

function yardi_settings_form_validate(&$form, &$form_state) {
  $settings = $form_state['storage']['yardi'] + $form_state['values'];
  $ping = yardi_ping($settings);
  if ($ping->resultStatus != 'Success') {
    form_error($form, t('The Yardi settings are not valid. Please check the settings and try again.'));
  }
}

function yardi_settings_form_submit($form, &$form_state) {
  $yardi = $form_state['storage']['yardi'];
  variable_set('yardi_debug', $form_state['values']['debug']);

  $settings = !empty($yardi) ?
    array_intersect_key($form_state['values'], $form_state['storage']['yardi']) : $form_state['values'];
  $saved = yardi_update_settings($settings);
  if ($saved !== FALSE) {
    drupal_set_message('Successfully saved Yardi Settings.');
  }
  else {
    drupal_set_message('The settings could not be saved to the database', 'error');
  }
  if (empty($yardi)) {
    $form_state['redirect'] = 'admin/config/services/yardi';
  }
  drupal_redirect_form($form_state);
}

function yardi_settings_delete_form($form, &$form_state, $yardi) {
  $form['yardi_id'] = array(
    '#type' => 'token',
    '#value' => $yardi['ysid']
  );

  return confirm_form($form, t('Are you sure you want to delete these settings'),
    'admin/config/services/yardi'
    );
}

function yardi_settings_delete_form_submit($form, &$form_state) {
  $id = $form_state['values']['yardi_id'];
  db_delete('yardi_settings')->condition('ysid', $id)->execute();
  drupal_redirect_form($form_state);
}

/* Yardi Settings on Webform */

function YardiIntegration_webform_submission_insert($node, $submission) {
  if ($node->yardi) {
    $settings = yardi_get_settings_from_webform($node);
    if (!empty($settings)) {
      $lead_doc = yardi_lead_doc();
      $lead = yardi_lead();

      foreach ($submission->data as $cid => $data) {
        $component = $node->webform['components'][$cid];
        if (!isset($component['extra']['yardi']['yardi_field']) ||
          !is_string($component['extra']['yardi']['yardi_field'])) {
          continue;
        }

        $value = $data[0];

        if (in_array($component['extra']['yardi']['yardi_field'], $lead::dateFields())) {
          if (isset($value['year'])) {
            $value = sprintf("%d-%d-%d", $value['year'], $value['month'], $value['day']);
          }
          elseif (isset($value['hour'])) {
            $value = sprintf("%d:%d %s", $value['hour'], $value['minute'], $value['second']);
          }
        }

        if (is_array($value)) {
          $value = implode(',', $value);
        }

        $lead->{$component['extra']['yardi']['yardi_field']} = $value;
      }
      $lead->ExtReference = $node->nid.'_'.$submission->sid;
      $lead->SourceName = $settings['SourceName'];
      $lead->PropertyCode = $settings['propertycode'];
      $lead_doc->addLead($lead);
      $success = yardi_import_guest($settings, $lead_doc);

      if ($success->resultStatus = 'Success') {
        watchdog('YardiIntegration', "Successfully added submission id @sid to the Yardi database. !link.",
          array('@sid' => $submission->sid,
            '!link' => l('View submission', 'node/'.$node->nid.'/submission/'.$submission->sid)), WATCHDOG_INFO);
      }
      else {
        watchdog('YardiIntegration', "Failed to add new lead to Yardi: @message",
          array('@message' => $success->resultMessage), WATCHDOG_ERROR);
      }
    }
  }
}

function YardiIntegration_node_delete($node) {
  yardi_delete_webform_settings($node);
}


function yardi_load($id) {
  $ret = yardi_get_settings(array(), array('ysid' => $id));
  return isset($ret[$id]) ? $ret[$id] : array();
}

/* Yardi Settings */

function yardi_get_settings($fields = array(), $options = NULL) {
  if (!empty($fields)) {
    $fields += array('ysid');
  }

  $settings = db_select('yardi_settings', 'ys')->fields('ys', $fields);

  if (!empty($options)) {
    foreach ($options as $name => $value) {
      $settings->condition($name, $value);
    }
  }

  $result = $settings->execute();
  return $result->fetchAllAssoc('ysid', PDO::FETCH_ASSOC);
}

function yardi_create_settings($settings) {
  $settings = (object) $settings;
  drupal_write_record('yardi_settings', $settings);
  return $settings;
}

function yardi_update_settings($settings) {
  $settings = (object) $settings;
  if (!isset($settings->ysid)) {
    return yardi_create_settings($settings);
  }
  drupal_write_record('yardi_settings', $settings, array('ysid' => $settings->ysid));
  return $settings;
}

function yardi_delete_settings($settings) {
  return db_delete('yardi_settings')->condition('ysid', $settings['ysid'])->execute();
}

/* Hook Forms for webform */


function YardiIntegration_form_alter(&$form, $form_state, $form_id) {
  if (user_access('configure yardi webform') && isset($form['#node']->type) && $form_id == $form['#node']->type . '_node_form'
    && variable_get('webform_node_' . $form['#node']->type, FALSE)) {
    $node = $form['#node'];
    $yardi_settings = yardi_get_settings(array('ysid', 'label'));
    foreach ($yardi_settings as &$settings) {
      $settings = $settings['label'];
    }

    $form['yardi_config'] = array(
      '#type' => 'fieldset',
      '#group' => 'additional_settings',
      '#collapsible' => TRUE,
      '#title' => t('Yardi Integration')
    );

    $form['yardi_config']['yardi'] = array(
      '#type' => 'checkbox',
      '#title' => t('Send results from this form to Yardi'),
      '#default_value' => (isset($node->yardi) && $node->yardi == 1)
    );

    $form['yardi_config']['yardi_settings'] = array(
      '#type' => 'select',
      '#title' => t('Yardi Settings'),
      '#description' => t('Choose which leads database results will be saved in.'),
      '#options' => $yardi_settings,
      '#states' => array(
        'visible' => array(
          ':input[name="yardi"]' => array('checked' => TRUE)
        )
      )
    );

    $form['#submit'][] = 'YardiIntegration_node_form_submit';
  }
}

function YardiIntegration_node_form_submit(&$form, &$form_state) {
  if (user_access('configure yardi webform')) {
    $node = &$form['#node'];
    $node->yardi = ($form_state['values']['yardi'] == 1);
    if ($node->yardi == TRUE) {
      $node->yardi_settings = $form_state['values']['yardi_settings'];
      yardi_set_webform_settings($node);
    }
    else {
      yardi_delete_webform_settings($node);
    }
  }
}

/* Hook Webform Components Form */

function YardiIntegration_form_webform_component_edit_form_alter(&$form, &$form_state,
                                                                 $form_id) {
  $node = $form['#node'];
  $default = !empty($form_state['values']) ? $form_state['values']['extra']['yardi']['yardi_field'] : 0;
  $clone = $form['clone']['#value'];
  $component = !empty($form['cid']) && isset($form['cid']['#value']) && $form['cid']['#value'] > 0 ?
    $node->webform['components'][$form['cid']['#value']] : NULL;
  if (empty($form_state['values']) && !$clone && isset($component)) {
    $default = $component['extra']['yardi']['yardi_field'];
  }

  if ($node->yardi == TRUE) {
    $fields = yardi_get_fields($form['type']['#value']);
    array_unshift($fields, '-- Not Set --');

    if ($fields) {
      $extra = &$form['extra'];
      $extra['yardi'] = array(
        '#type' => 'fieldset',
        '#title' => t('Yardi'),
        '#collapsible' => TRUE,
        '#collapse' => FALSE
      );

      $extra['yardi']['yardi_field'] = array(
        '#type' => 'select',
        '#title' => t('Map to Yardi Field'),
        '#default_value' => $default,
        '#options' => $fields
      );
    }
  }

}

/* Node Load */

function YardiIntegration_node_load($nodes, $types) {
  $query = db_select('yardi_webform', 'yw')->fields('yw', array('ysid', 'nid'))
    ->condition('yw.nid', array_keys($nodes))->execute();
  $settings = $query->fetchAllAssoc('nid', PDO::FETCH_ASSOC);

  if (!empty($settings)) {
    foreach ($settings as $nid => $setting) {
      $nodes[$nid]->yardi = 1;
      $nodes[$nid]->yardi_settings = $setting['ysid'];
    }
  }
}

/* Yardi Webform Settings */

function yardi_set_webform_settings($node) {
  $save = array(
    'nid' => $node->nid,
    'ysid' => $node->yardi_settings
  );

  $query = db_select('yardi_webform', 'yw')
    ->fields('yw', array('yid'))
    ->condition('yw.nid', $node->nid)
    ->execute();

  $id = $query->fetchAssoc();

  if (!empty($id)) {
    $save['yid'] = $id['yid'];
    $saved = drupal_write_record('yardi_webform', $save, array('yid'));
  }
  else {
    $saved = drupal_write_record('yardi_webform', $save);
  }

  if ($saved === FALSE) {
    drupal_set_message('There was an error committing Yardi settings to the webform', 'error');
  }

}

function yardi_get_settings_from_webform($node) {
  $settings = db_select('yardi_settings', 'ys')->fields('ys', array())
    ->condition('ys.ysid', $node->yardi_settings);

  $result = $settings->execute();
  return $result->fetchAssoc();
}

function yardi_delete_webform_settings($node) {
  return db_delete('yardi_webform')->condition('nid', $node->nid)->execute();
}

/* Yardi API Functions */

function yardi_ping($settings = array()) {
  module_load_include('php', 'YardiIntegration', 'api/YardiClient/YardiClient');
  $yardi = new \Yardi\YardiClient(
    $settings['url'],
    $settings['dbusername'],
    $settings['dbpassword'],
    $settings['dbname'],
    $settings['server'],
    $settings['platform']
  );
  $ret = $yardi->ping();
  if (variable_get('yardi_debug', FALSE)) {
    $soap = $ret->getSoapClient();
    watchdog('YardiIntegration Debug', 'Ping: @import',
      array('@import' => $soap->__getLastRequest()), WATCHDOG_DEBUG);
  }
  return $ret;
}

function yardi_import_guest($settings = array(), $lead) {
  module_load_include('php', 'YardiIntegration', 'api/YardiClient/YardiClient');

  $yardi = new \Yardi\YardiClient(
    $settings['url'],
    $settings['dbusername'],
    $settings['dbpassword'],
    $settings['dbname'],
    $settings['server'],
    $settings['platform']
  );
  if ($lead instanceof \Yardi\YardiXmlDoc) {
    $leadDoc = $lead;
  }
  else {
    $leadDoc = new \Yardi\YardiXmlDoc();
    if (!$lead instanceof \Yardi\YardiLead) {
      $lead = new \Yardi\YardiLead($lead);
    }
    $lead->SourceName = $settings['SourceName'];
    $lead->PropertyCode = $settings['propertycode'];
    $lead->ExtReference = isset($settings['ExtReference']) ? $settings['ExtReference'] : time();
    $leadDoc->addLead($lead);
  }
  $ret = $yardi->importGuest($leadDoc);

  if (variable_get('yardi_debug', FALSE)) {
    $soap = $ret->getSoapClient();
    watchdog('YardiIntegration Debug', 'ImportGuest: @import',
      array('@import' => $soap->__getLastRequest()), WATCHDOG_DEBUG);
  }
  return $ret;
}

function yardi_lead_doc() {
  module_load_include('php', 'YardiIntegration', 'api/YardiClient/YardiXmlDoc');
  return new \Yardi\YardiXmlDoc();
}

function yardi_lead() {
  module_load_include('php', 'YardiIntegration', 'api/YardiClient/YardiLead');
  return new \Yardi\YardiLead();
}

function yardi_get_fields($type = NULL) {
  $lead = yardi_lead();
  if (!isset($type)) {
    return $lead::getAllAttributeNames();
  }


  switch ($type) {
    case 'checkbox':
      return drupal_map_assoc($lead::booleanFields());
    case 'textfield':
    case 'textarea':
    case 'select':
    case 'radios':
      $attr = $lead::getAllAttributeNames();
      $ret = array_combine($attr, $attr);
      unset($ret['SourceName']);
      asort($ret, SORT_STRING);
      return $ret;
    case 'email':
    case 'webform_email':
      $attr = array_keys($lead::stringLengths());
      $ret =  array_combine($attr, $attr);
      unset($ret['SourceName']);
      asort($ret, SORT_STRING);
      return $ret;
    case 'webform_number':
      $attr = $lead::integerFields();
      $ret = array_combine($attr, $attr);
      asort($ret, SORT_STRING);
      return $ret;
    case 'date':
    case 'webform_time':
      $attr = $lead::dateFields();
      $ret = array_combine($attr, $attr);
      asort($ret, SORT_STRING);
      return $ret;
  }

  return FALSE;
}